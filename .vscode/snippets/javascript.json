{
/*
	 // Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
  "import": {
    "prefix": "imp",
    "body": "import ${2:name} from '${1:module}'$0",
    "description": "Imports entire module statement in ES6 syntax"
  },
	"importDestructing": {
		"prefix": "imd",
		"body": "import { ${2:name} } from '${1:module}'$0",
		"description": "Imports only a portion of the module in ES6 syntax"
	},
	"importEverything": {
		"prefix": "ime",
		"body": "import * as ${2:alias} from '${1:module}'$0",
		"description": "Imports everything as alias from the module in ES6 syntax"
	},

	"constructor": {
		"prefix": "con",
		"body": "constructor(${1:params}) {\n\t${0}\n}",
		"description": "Add default constructor in a class in ES6 syntax"
	},
	"method": {
		"prefix": "met",
		"body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
		"description": "Creates a method inside a class in ES6 syntax"
	},
	"boundMethod": {
		"prefix": "bmet",
		"body": "${1:methodName} = (${2:params}) => {\n\t${0}\n}",
		"description": "Creates a method inside a class in ES6 syntax"
	},
	"anonymousFunction": {
		"prefix": "anfn",
		"body": "(${1:params}) => {\n\t${2}\n}",
		"description": "Creates an anonymous function in ES6 syntax"
	},
	 "namedFunction": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax"
  },


	// React
	"reactClassComponent": {
		"prefix": "rcc",
		"body": "import React, { Component } from 'react'\n\nexport class ${1:ComponentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}",
		"description": "Creates a React component class with ES6 module system"
	},
	"reactClassPureComponent": {
		"prefix": "rcpc",
		"body": "import React, { PureComponent } from 'react'\n\nexport class ${1:ComponentName} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}",
		"description": "Creates a React component class with ES6 module system"
	},
	"reactFunctionComponent": {
		"prefix": "rfc",
		"body": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport function ${1:ComponentName}() {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t)\n}\n\n${1:ComponentName}.propTypes = {\n\t$0\n}",
		"description": "Creates a stateless React component with PropTypes and ES6 module system"
	},
	"componentWillMount": {
		"prefix": "cwm",
		"body": "\ncomponentWillMount() {\n\t$0\n}\n",
		"description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
	},
	"componentDidMount": {
		"prefix": "cdm",
		"body": "componentDidMount() {\n\t$0\n}\n",
		"description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
	},
	"componentWillReceiveProps": {
		"prefix": "cwr",
		"body": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
		"description": "Invoked when a component is receiving new props. This method is not called for the initial render."
	},
	"shouldComponentUpdate": {
		"prefix": "scu",
		"body": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
		"description": "Invoked before rendering when new props or state are being received. "
	},
	"componentWillUpdate": {
		"prefix": "cwup",
		"body": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
		"description": "Invoked immediately before rendering when new props or state are being received."
	},
	"componentDidUpdate": {
		"prefix": "cdup",
		"body": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
		"description": "Invoked immediately after the component's updates are flushed to the DOM."
	},
	"componentWillUnmount": {
		"prefix": "cwun",
		"body": "componentWillUnmount() {\n\t$0\n}\n",
		"description": "Invoked immediately before a component is unmounted from the DOM."
	},
	"componentRender": {
		"prefix": "ren",
		"body": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
		"description": "When called, it should examine this.props and this.state and return a single child element."
	},
	"componentSetStateObject": {
		"prefix": "sst",
		"body": "this.setState($0)",
		"description": "Performs a shallow merge of nextState into current state"
	},
	"staticPropTypes": {
		"prefix": "spt",
		"body": "static propTypes = {\n\t$2\n}",
		"description": "Creates empty propTypes declaration"
	},
	"staticDefaultProps": {
		"prefix": "sdp",
		"body": "static defaultProps = {\n\t$2\n}",
		"description": "Creates empty defaultProps declaration"
	},
	"propTypeArray": {
		"prefix": "pta",
		"body": "PropTypes.array,",
		"description": "Array prop type"
	},
	"propTypeArrayRequired": {
		"prefix": "ptar",
		"body": "PropTypes.array.isRequired,",
		"description": "Array prop type required"
	},
	"propTypeBool": {
		"prefix": "ptb",
		"body": "PropTypes.bool,",
		"description": "Bool prop type"
	},
	"propTypeBoolRequired": {
		"prefix": "ptbr",
		"body": "PropTypes.bool.isRequired,",
		"description": "Bool prop type required"
	},
	"propTypeFunc": {
		"prefix": "ptf",
		"body": "PropTypes.func,",
		"description": "Func prop type"
	},
	"propTypeFuncRequired": {
		"prefix": "ptfr",
		"body": "PropTypes.func.isRequired,",
		"description": "Func prop type required"
	},
	"propTypeNumber": {
		"prefix": "ptn",
		"body": "PropTypes.number,",
		"description": "Number prop type"
	},
	"propTypeNumberRequired": {
		"prefix": "ptnr",
		"body": "PropTypes.number.isRequired,",
		"description": "Number prop type required"
	},
	"propTypeObject": {
		"prefix": "pto",
		"body": "PropTypes.object,",
		"description": "Object prop type"
	},
	"propTypeObjectRequired": {
		"prefix": "ptor",
		"body": "PropTypes.object.isRequired,",
		"description": "Object prop type required"
	},
	"propTypeString": {
		"prefix": "pts",
		"body": "PropTypes.string,",
		"description": "String prop type"
	},
	"propTypeStringRequired": {
		"prefix": "ptsr",
		"body": "PropTypes.string.isRequired,",
		"description": "String prop type required"
	},
	"propTypeNode": {
		"prefix": "ptnd",
		"body": "PropTypes.node,",
		"description": "Anything that can be rendered: numbers, strings, elements or an array"
	},
	"propTypeNodeRequired": {
		"prefix": "ptndr",
		"body": "PropTypes.node.isRequired,",
		"description": "Anything that can be rendered: numbers, strings, elements or an array required"
	},
	"propTypeElement": {
		"prefix": "ptel",
		"body": "PropTypes.element,",
		"description": "React element prop type"
	},
	"propTypeElementRequired": {
		"prefix": "ptelr",
		"body": "PropTypes.element.isRequired,",
		"description": "React element prop type required"
	},
	"propTypeEnum": {
		"prefix": "pte",
		"body": "PropTypes.oneOf(['$0']),",
		"description": "Prop type limited to specific values by treating it as an enum"
	},
	"propTypeEnumRequired": {
		"prefix": "pter",
		"body": "PropTypes.oneOf(['$0']).isRequired,",
		"description": "Prop type limited to specific values by treating it as an enum required"
	},
	"propTypeOneOfType": {
		"prefix": "ptet",
		"body": "PropTypes.oneOfType([\n\t$0\n]),",
		"description": "An object that could be one of many types"
	},
	"propTypeOneOfTypeRequired": {
		"prefix": "ptetr",
		"body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
		"description": "An object that could be one of many types required"
	},
	"propTypeArrayOf": {
		"prefix": "ptao",
		"body": "PropTypes.arrayOf($0),",
		"description": "An array of a certain type"
	},
	"propTypeArrayOfRequired": {
		"prefix": "ptaor",
		"body": "PropTypes.arrayOf($0).isRequired,",
		"description": "An array of a certain type required"
	},
	"propTypeShape": {
		"prefix": "ptsh",
		"body": "PropTypes.shape({\n\t$0\n}),",
		"description": "An object taking on a particular shape"
	},
	"propTypeShapeRequired": {
		"prefix": "ptshr",
		"body": "PropTypes.shape({\n\t$0\n}).isRequired,",
		"description": "An object taking on a particular shape required"
	}
}
