{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"reactClassComponent": {
		"prefix": "rcc",
		"body": [
			"import * as React from 'react'\n",
			"type ${1:ComponentName}Props = {}\n",
			"export class ${1:ComponentName} extends React.Component<${1:ComponentName}Props> {",
			"\trender() {",
			"\t\treturn (",
			"\t\t\t<div>",
			"\t\t\t\t$0",
			"\t\t\t</div>",
			"\t\t)",
			"\t}",
			"}",
		],
		"description": "Create a React component class"
	},
	"reactClassPureComponent": {
		"prefix": "rcpc",
		"body": [
			"import * as React from 'react'\n",
			"type ${1:ComponentName}Props = {}\n",
			"export class ${1:ComponentName} extends React.PureComponent<${1:ComponentName}Props> {",
			"\trender() {",
			"\t\treturn (",
			"\t\t\t<div>",
			"\t\t\t\t$0",
			"\t\t\t</div>",
			"\t\t)",
			"\t}",
			"}",
		],
		"description": "Creates a React pure component class"
	},
	"reactFunctionComponent": {
		"prefix": "rfc",
		"body": [
			"import * as React from 'react'\n",
			"type ${1:ComponentName}Props = {}\n",
			"export const ${1:ComponentName}: React.SFC<${1:ComponentName}Props> = () => {",
			"\treturn (",
			"\t\t<div>",
			"\t\t\t$0",
			"\t\t</div>",
			"\t)",
			"}",
		],
		"description": "Creates a stateless React component with PropTypes and ES6 module system"
	},
	"componentWillMount": {
		"prefix": "cwm",
		"body": "\ncomponentWillMount() {\n\t$0\n}\n",
		"description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
	},
	"componentDidMount": {
		"prefix": "cdm",
		"body": "componentDidMount() {\n\t$0\n}\n",
		"description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
	},
	"componentWillReceiveProps": {
		"prefix": "cwr",
		"body": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
		"description": "Invoked when a component is receiving new props. This method is not called for the initial render."
	},
	"shouldComponentUpdate": {
		"prefix": "scu",
		"body": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
		"description": "Invoked before rendering when new props or state are being received. "
	},
	"componentWillUpdate": {
		"prefix": "cwup",
		"body": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
		"description": "Invoked immediately before rendering when new props or state are being received."
	},
	"componentDidUpdate": {
		"prefix": "cdup",
		"body": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
		"description": "Invoked immediately after the component's updates are flushed to the DOM."
	},
	"componentWillUnmount": {
		"prefix": "cwun",
		"body": "componentWillUnmount() {\n\t$0\n}\n",
		"description": "Invoked immediately before a component is unmounted from the DOM."
	},
	"componentRender": {
		"prefix": "ren",
		"body": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
		"description": "When called, it should examine this.props and this.state and return a single child element."
	},
	"staticDefaultProps": {
		"prefix": "sdp",
		"body": "static defaultProps = {\n\t$2\n}",
		"description": "Creates empty defaultProps declaration"
	}
}
