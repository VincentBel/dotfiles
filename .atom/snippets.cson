# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.source.md':
  'code':
    'prefix': 'code'
    'body': '```${1:javascript}\n${2}\n```'

'.source.js':
  'console.log':
    'prefix': 'log'
    'body': 'console.log(${1:"crash"});$2'
  'import':
    'prefix': 'im'
    'body': "import $2 from '$1'"


  ######### React #########

  'React Functional Component':
    'prefix': 'rfc'
    'body': """
      import React, { PropTypes } from 'react'

      export function ${1}({ $2 }) {
        return (
          ${3:<div>MyComponent</div>}
        )
      }

      ${1}.propTypes = {
      }

    """

  'React Class Component':
    'prefix': 'rcc'
    'body': """
      import React, { Component, PropTypes } from 'react'

      export class ${1:MyComponent} extends Component {
        static propTypes = {}

        render() {
          return (${2:<div>MyComponent</div>})
        }
      }

    """

  'React Class Pure Component':
    'prefix': 'rcpc'
    'body': """
      import React, { PureComponent, PropTypes } from 'react'

      export class ${1:MyComponent} extends PureComponent {
        static propTypes = {}

        render() {
          return (${2:<div>MyComponent</div>})
        }
      }

    """

  # PropType string
  'React PropType string':
    'prefix': 'rpstr',
    'body': "${1:myProp}: PropTypes.string,"
  'React PropType string required':
    'prefix': 'rpstrr',
    'body': "${1:myProp}: PropTypes.string.isRequired,"

  # PropType number
  'React PropType number':
    'prefix': 'rpn',
    'body': "${1:myProp}: PropTypes.number,"
  'React PropType number required':
    'prefix': 'rpnr',
    'body': "${1:myProp}: PropTypes.number.isRequired,"

  # PropType object
  'React PropType object':
    'prefix': 'rpo',
    'body': "${1:myProp}: PropTypes.object,"
  'React PropType object required':
    'prefix': 'rpor',
    'body': "${1:myProp}: PropTypes.object.isRequired,"

  # PropType array
  'React PropType array':
    'prefix': 'rpa',
    'body': "${1:myProp}: PropTypes.array,"
  'React PropType array required':
    'prefix': 'rpar',
    'body': "${1:myProp}: PropTypes.array.isRequired,"

  # PropType bool
  'React PropType bool':
    'prefix': 'rpb',
    'body': "${1:myProp}: PropTypes.bool,"
  'React PropType bool required':
    'prefix': 'rpbr',
    'body': "${1:myProp}: PropTypes.bool.isRequired,"

  # PropType element
  'React PropType element':
    'prefix': 'rpe',
    'body': "${1:myProp}: PropTypes.element,"
  'React PropType element required':
    'prefix': 'rper',
    'body': "${1:myProp}: PropTypes.element.isRequired,"

  # PropType function
  'React PropType function':
    'prefix': 'rpf',
    'body': "${1:myProp}: PropTypes.func,"
  'React PropType function required':
    'prefix': 'rpfr',
    'body': "${1:myProp}: PropTypes.func.isRequired,"

  # PropType shape
  'React PropType shape':
    'prefix': 'rps',
    'body': """
      ${1:myProp}: PropTypes.shape({
        ${2}
      }),
    """
  'React PropType shape required':
    'prefix': 'rpsr',
    'body': """
      ${1:myProp}: PropTypes.shape({
        ${2}
      }).isRequired,
    """

  # lifecycle methods
  "React: componentWillMount() { ... }":
    prefix: "cwm"
    body: "componentWillMount() {\n\t${1}\n}${2}"

  "React: componentDidMount() { ... }":
    prefix: "cdm"
    body: "componentDidMount() {\n\t${1}\n}${2}"

  "React: componentWillReceiveProps(np) { ... }":
    prefix: "cwrp"
    body: "componentWillReceiveProps(nextProps) {\n\t${1}\n}${2}"

  "React: shouldComponentUpdate(np, ns) { ... }":
    prefix: "scu"
    body: "shouldComponentUpdate(nextProps, nextState) {\n\t${1}\n}${2}"

  "React: componentWillUpdate(np, ns) { ... }":
    prefix: "cwu"
    body: "componentWillUpdate(nextProps, nextState) {\n\t${1}\n}${2}"

  "React: componentDidUpdate(pp, ps) { ... }":
    prefix: "cdu"
    body: "componentDidUpdate(prevProps, prevState) {\n\t${1}\n}${2}"

  "React: componentWillUnmount() { ... }":
    prefix: "cwum"
    body: "componentWillUnmount() {\n\t${1}\n}${2}"
